Minimax
Like a professional chess player, this algorithm sees a few steps ahead and puts itself in the shoes
of its opponent. It keeps playing ahead until it reaches a terminal arrangement of the board
(terminal state) resulting in a tie, a win, or a loss. Once in a terminal state, the AI will assign:
* an arbitrary positive score (+10) for a win
* a negative score (-10) for a loss
* a neutral score (0) for a tie

At the same time, the algorithm evaluates the moves that lead to a terminal state based on the
players’ turn. It will choose the move with maximum score when it is the AI’s turn and choose the
move with the minimum score when it is the human player’s turn. Using this strategy, Minimax avoids
losing to the human player.

A Minimax algorithm can be best defined as a recursive function that does the following things:
1) Return a value if a terminal state is found (+10, 0, -10)
2) Go through available spots on the board
3) Call the minimax function on each available spot (recursion)
4) Evaluate returning values from function calls
5) And return the best value